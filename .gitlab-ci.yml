# this file defines the CI/CD stages for Ahiqar's back end.
# in some cases they invoke scripts provided at ci-scripts order to
# keep this file slim and clear. please have a look at these scripts for
# information that goes beyond the documentation of the single stages.
#

# this config uses custom Docker images to keep the pipelines fast.
# see https://gitlab.gwdg.de/mrodzis/docker-images/ for more 
# info about them.


stages:
  - unit_tests
  - collation
  - build
  - package
  - deploy_docker
  - deploy_app
  - api_tests
  - release
  - data_import

include: 
  - '/ci-scripts/.api_tests.yml'
  - '/ci-scripts/.unit_integration_tests.yml'

## TEMPLATES:
.ssh-config: &ssh
- which ssh-agent
- eval $(ssh-agent -s)
- echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
- mkdir -p ~/.ssh
- chmod 700 ~/.ssh

.env: &env
- echo $SECRETS | sed "s#\s#\n#g" >> docker/ahikar.env
- echo "APP_DEPLOY_TOKEN=$APP_DEPLOY_TOKEN"  >> docker/ahikar.env
- sh docker/set-env-for-docker-compose.sh

# used for develop and main, see test for all other cases!
.deploy: &deploy
- scp -o 'StrictHostKeyChecking no' docker/ahikar.env $SSH_USER@$SSH_IP:~/$CI_COMMIT_REF_NAME/ahikar.env
- scp -o 'StrictHostKeyChecking no' docker/tg.env $SSH_USER@$SSH_IP:~/$CI_COMMIT_REF_NAME/tg.env
- scp -o 'StrictHostKeyChecking no' docker/docker-compose.yml $SSH_USER@$SSH_IP:~/$CI_COMMIT_REF_NAME/docker-compose.yml
- scp -o 'StrictHostKeyChecking no' docker/.env $SSH_USER@$SSH_IP:~/$CI_COMMIT_REF_NAME/.env
- ssh -o 'StrictHostKeyChecking no' $SSH_USER@$SSH_IP "docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY"
- if [[ ${CI_COMMIT_MESSAGE} =~ "ci-reimport-data" || $REIMPORT == "true" ]]; then
- echo "WE ARE GOING TO REMOVE THE VOLUME"
- ssh -o 'StrictHostKeyChecking no' $SSH_USER@$SSH_IP "cd ~/$CI_COMMIT_REF_NAME; docker-compose pull && docker-compose down --volumes && docker-compose up -d"
- else
- ssh -o 'StrictHostKeyChecking no' $SSH_USER@$SSH_IP "cd ~/$CI_COMMIT_REF_NAME; docker-compose pull && docker-compose down && docker-compose up -d"
- fi
- while [ $(curl --head --silent https://ahikar-test.sub.uni-goettingen.de/exist/rest/ | grep -c "200 OK") == 0 ]; do sleep 3s; done


.git: &git
- eval $(ssh-agent -s)
- echo "$DEPLOY_KEY" | tr -d '\r' | ssh-add - > /dev/null
- mkdir -p ~/.ssh
- chmod 700 ~/.ssh
- ssh-keyscan gitlab.gwdg.de  >> ~/.ssh/known_hosts
- git config --global user.email "ahiqar-backend@gitlab.gwdg.de"
- git config --global user.name "Gitlab CI"

.http-status: &http-status
- STATUS=$(echo $HEADER | head -n 1 | cut -d" " -f 2)
- echo "Current HTTP status is $STATUS."
- if [[ "$STATUS" != "200" ]]; then exit 1; fi

## GLOBAL VARIABLES
variables:
  GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_PROJECT_PATH/$CI_JOB_NAME
  # ↑ needed to handle concurrency
  # see https://docs.gitlab.com/ee/ci/runners/configure_runners.html#handling-concurrency
  GIT_DEPTH: 2
  # ↑ reduces the amount of data transfered to the runner (shallow clone)

## JOBS
# build the Ahiqar application and uploads it to the DARIAH package repository.
# the XAR file is downloaded from there later during the deployment.
build_exist_app:
  image: docker.gitlab.gwdg.de/mrodzis/docker-images/alpine-exist-upload
  stage: build
  script:
    - cd exist-app
    - ant -propertyfile ${CI_COMMIT_REF_NAME}.build.properties prepare
    - FILENAME=$(ls build/ahikar*.xar)
    - curl -u ci:${EXIST_UPLOAD_PW} -X POST -F file=@${FILENAME} https://ci.de.dariah.eu/exist-upload
  artifacts:
    paths:
      - exist-app/build/*.xar
      - exist-app/build/dependencies/*.xar
  dependencies: []
  
# gets the current front end from  https://gitlab.gwdg.de/subugoe/ahiqar/ahiqar-tido.
# in this stage we also create two instances of the front end for the Syriac and the
# Arabic/Karshuni collection each.
# this stage also detects if the CSS files of the front end have been updated and commits
# them to this repo if necessary.
load_frontend-all:
  image: docker.gitlab.gwdg.de/mrodzis/docker-images/debian
  stage: build
  variables:
    FRONTEND_REPO_ID: "9882"
  script:
    - *git
    - 'curl --output frontend.zip --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "$CI_API_V4_URL/projects/$FRONTEND_REPO_ID/jobs/artifacts/develop/download?job=build"'
    - unzip frontend.zip
    - bash ci-scripts/set-entrypoint.sh
    - mkdir -p docker/frontend
    - mkdir docker/frontend/syriac && mkdir docker/frontend/arabic-karshuni
    - cp tido/dist/* docker/frontend/syriac
    - sed -i 's/textapi\/ahikar\/arabic-karshuni/textapi\/ahikar\/syriac/' docker/frontend/syriac/index.html
    - cp tido/dist/* docker/frontend/arabic-karshuni
    - bash ci-scripts/update-css.sh
  artifacts:
    paths:
      - docker/frontend/syriac
      - docker/frontend/arabic-karshuni
  dependencies: []


load_website-all:
  image: docker.gitlab.gwdg.de/mrodzis/docker-images/debian
  stage: build
  variables:
    WEBSITE_REPO_ID: "14957"
  script:
    - 'curl --output website.zip --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "$CI_API_V4_URL/projects/$WEBSITE_REPO_ID/jobs/artifacts/develop/download?job=build_page-backend"'
    - unzip website.zip
    - mkdir -p docker/frontend/website
    - cp -r src/.vuepress/dist/* docker/frontend/website
  artifacts:
    paths:
      - docker/frontend/website
  dependencies: []


# builds and pushes the ci-docker image to the registry.
build_docker-all:
  image: docker.gitlab.gwdg.de/subugoe/ahiqar/backend/ci-docker
  services:
    - docker:dind
  stage: package
  script:
    - *ssh
    - *env
    - cd docker
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker-compose build --pull
    # - docker-compose up & sleep 30s &&
    # like to add a test here, but seems that within the runner specified port is not available.
    # - while ! curl --silent --head http://localhost:8094/db/ | grep "200 OK"; do sleep 2s; echo "test failed"; curl --head http://localhost:8094/db/; done
    # - docker-compose down
    - docker-compose push
  except:
    - tags
  timeout: 5m
  dependencies:
    - build_exist_app
    - load_frontend-all
    - load_website-all

# deploys the Docker container on ahikar-test.
deploy_docker-test:
  image: docker.gitlab.gwdg.de/mrodzis/docker-images/debian
  stage: deploy_docker
  except:
    - main
    - develop
    - tags
  environment:
    name: testing
  script:
    - *ssh
    - *env
    - scp -o 'StrictHostKeyChecking no' docker/ahikar.env $SSH_USER@$SSH_IP:~/test/ahikar.env
    - scp -o 'StrictHostKeyChecking no' docker/tg.env $SSH_USER@$SSH_IP:~/test/tg.env
    - scp -o 'StrictHostKeyChecking no' docker/docker-compose.yml $SSH_USER@$SSH_IP:~/test/docker-compose.yml
    - scp -o 'StrictHostKeyChecking no' docker/.env $SSH_USER@$SSH_IP:~/test/.env
    - ssh -o 'StrictHostKeyChecking no' $SSH_USER@$SSH_IP "docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY"
    - ssh -o 'StrictHostKeyChecking no' $SSH_USER@$SSH_IP "cd test; docker-compose pull && docker-compose down && docker-compose up -d"
    # wait until db is online back again, important to have a job timeout declared
    - while [ $(curl --head --silent https://ahikar-test.sub.uni-goettingen.de/exist/rest/ | grep -c "200 OK") == 0 ]; do sleep 3s; done
  timeout: 10 minutes
  dependencies: []

# deploys the Docker container on ahikar-dev.
deploy_docker-dev:
  image: docker.gitlab.gwdg.de/mrodzis/docker-images/debian
  stage: deploy_docker
  only:
    - develop
  environment:
    name: ahikar-dev
  script:
    - *ssh
    - *env
    - *deploy
  dependencies: []

# deploys the Docker container on ahikar.
deploy_docker-main:
  image: docker.gitlab.gwdg.de/mrodzis/docker-images/debian
  stage: deploy_docker
  only:
    - main
  environment:
    name: ahikar
  script:
    - *ssh
    - *env
    - *deploy
  dependencies: []

# deploys the Ahiqar app to the database at ahikar-test.
deploy_app-test:
  image: docker.gitlab.gwdg.de/mrodzis/docker-images/alpine-exist-upload
  stage: deploy_app
  except:
    - main
    - develop
    - tags
  environment:
    name: ahikar-test
  script:
    - VERSION=$(grep -E -o "project.version=[0-9]+\.[0-9]+\.[0-9]+" exist-app/build.properties | grep -E -o "[0-9]+\.[0-9]+\.[0-9]+")
    - echo $VERSION
    - HEADER=$(curl --head -s https://ahikar-test.sub.uni-goettingen.de/api/deploy?token=${APP_DEPLOY_TOKEN}&version=${VERSION})
    - *http-status
  dependencies: []
  retry: 2
  # ↑ db sometimes reacts with 503, immediate retry usually works

# deploys the Ahiqar app to the database at ahikar-dev.
deploy_app-dev:
  image: curlimages/curl
  stage: deploy_app
  only:
    - develop
  environment:
    name: ahikar-dev
  script:
    - HEADER=$(curl --head -s https://ahikar-dev.sub.uni-goettingen.de/api/deploy?token=${APP_DEPLOY_TOKEN})
    - *http-status
  dependencies: []
  retry: 2

# deploys the Ahiqar app to the database at ahikar.
deploy_app-main:
  image: curlimages/curl
  stage: deploy_app
  only:
    - main
    - tags
  environment:
    name: ahikar
  script:
    - HEADER=$(curl --head -s https://ahikar.sub.uni-goettingen.de/api/deploy?token=$APP_DEPLOY_TOKEN)
    - *http-status
  dependencies: []
  retry: 2

# data import
import-test:
  image: curlimages/curl
  stage: data_import
  rules:
    - if: '($CI_COMMIT_MESSAGE =~ /ci-reimport-data/ || $REIMPORT == "true") && $CI_COMMIT_REF_NAME != "develop" && $CI_COMMIT_REF_NAME != "main" && $CI_COMMIT_TAG == null && $CI_MERGE_REQUEST_ID == null'
  script:
    - curl https://ahikar-test.sub.uni-goettingen.de/api/import-data?token=${APP_DEPLOY_TOKEN}

import-dev:
  image: curlimages/curl
  stage: data_import
  rules:
    - if: '($CI_COMMIT_MESSAGE =~ /ci-reimport-data/ || $REIMPORT == "true") && $CI_COMMIT_REF_NAME == "develop"'
  script:
    - curl https://ahikar-dev.sub.uni-goettingen.de/api/import-data?token=${APP_DEPLOY_TOKEN}

import-main:
  image: curlimages/curl
  stage: data_import
  rules:
    - if: '($CI_COMMIT_MESSAGE =~ /ci-reimport-data/ || $REIMPORT == "true") && ($CI_COMMIT_REF_NAME == "main" || $CI_COMMIT_TAG)'
  script:
    - curl https://ahikar.sub.uni-goettingen.de/api/import-data?token=${APP_DEPLOY_TOKEN}

# this job is triggered by a pipeline on the 'main' branch of https://gitlab.gwdg.de/subugoe/ahiqar/collatex.
# it retrieves the latest collation results from there and commits it to this repository.
get-collation-results:
  image: docker.gitlab.gwdg.de/mrodzis/docker-images/debian
  stage: collation
  rules:
    - if: '$UPDATE == "true"'
    - if: '$UPSTREAM_COMMIT_SHA'
    - if: '$PIPELINE_ID'
  variables:
    COLLATEX_REPO_ID: "10514"
  script:
    - *git
    - mkdir -p /tmp/this && cd /tmp/this
    - git clone git@gitlab.gwdg.de:subugoe/ahiqar/backend.git
    - 'curl --output jobs.json "https://gitlab.gwdg.de/api/v4/projects/$COLLATEX_REPO_ID/pipelines/$PIPELINE_ID/jobs?private_token=$GITLAB_TOKEN"'
    - RELEVANT_JOB_ID=$(jq ".[]|select(.stage==\"summarize\")" < jobs.json | jq .id)
    - 'curl --output collation-results.zip "https://gitlab.gwdg.de/api/v4/projects/$COLLATEX_REPO_ID/jobs/$RELEVANT_JOB_ID/artifacts?private_token=$GITLAB_TOKEN"'
    - unzip -u -d backend/exist-app/data/collation-results collation-results.zip
    - cd backend
    - git add exist-app/data/collation-results/* && git commit -m "update collation results" && git push
  dependencies: []
  allow_failure: true
  